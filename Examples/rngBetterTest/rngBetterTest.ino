
#include <rngBetter.h>
#define SERIALPORT Serial
#define SERIALSWAPLEVEL (0)

void setup() {
  // put your setup code here, to run once:
  // Validating all API calls. 
  SERIALPORT.swap(SERIALSWAPLEVEL);
  SERIALPORT.begin(115200);
  delay(1000);
  SERIALPORT.print("Generate seed (from just adc): ");

#if defined(CORE_HAS_ANALOG_ENH) && CORE_HAS_ANALOG_ENH
  #if defined(ADC_NATIVE_RESOLUTION)
    #if (ADC_NATIVE_RESOLUTION == 10)
      int32_t adcread = analogReadEnh(PIN_PD4, ADC_ACC64);
    #else
      int32_t adcread = analogReadEnh(PIN_PD4, ADC_ACC16);
    #endif
    if (adcread < 0) {
      SERIALPORT.println("ADC failure!! Please report the conditions under which this occurred via github issue. ");
      SERIALPORT.print("Error code: ");
      SERIALPORT.printHexln(adcread);
      while (1);
    }
    uint16_t seed = rng16::ADCtoSeed((uint16_t) adcread, 16);
    seed_xor16_11e(seed);
    seed = xor16_11e();
    SERIALPORT.print("11e: ");
    SERIALPORT.println(seed);
    seed_xor16_11f(seed);
    seed = xor16_11f();
    SERIALPORT.print("11f: ");
    SERIALPORT.println(seed);
    seed_xor16_152(seed);
    seed = xor16_152();
    SERIALPORT.print("152: ");
    SERIALPORT.println(seed);
    seed_xor16_174(seed);
    seed = xor16_174();
    SERIALPORT.print("174: ");
    SERIALPORT.println(seed);
    seed_xor16_17b(seed);
    seed = xor16_17b();
    SERIALPORT.print("17b: ");
    SERIALPORT.println(seed);
    seed_xor16_1b3(seed);
    seed = xor16_1b3();
    SERIALPORT.print("1b3: ");
    SERIALPORT.println(seed);
    seed_xor16_1f6(seed);
    seed = xor16_1f6();
    SERIALPORT.print("1f6: ");
    SERIALPORT.println(seed);
    seed_xor16_1f7(seed);
    seed = xor16_1f7();
    SERIALPORT.print("1f7: ");
    SERIALPORT.println(seed);
    seed_xor16_251(seed);
    seed = xor16_251();
    SERIALPORT.print("251: ");
    SERIALPORT.println(seed);
    seed_xor16_25d(seed);
    seed = xor16_25d();
    SERIALPORT.print("25d: ");
    SERIALPORT.println(seed);
    seed_xor16_25f(seed);
    seed = xor16_25f();
    SERIALPORT.print("25f: ");
    SERIALPORT.println(seed);
    seed_xor16_27d(seed);
    seed = xor16_27d();
    SERIALPORT.print("27d: ");
    SERIALPORT.println(seed);
    seed_xor16_27f(seed);
    seed = xor16_27f();
    SERIALPORT.print("27f: ");
    SERIALPORT.println(seed);
    seed_xor16_31c(seed);
    seed = xor16_31c();
    SERIALPORT.print("31c: ");
    SERIALPORT.println(seed);
    seed_xor16_31f(seed);
    seed = xor16_31f();
    SERIALPORT.print("31f: ");
    SERIALPORT.println(seed);
    seed_xor16_35b(seed);
    seed = xor16_35b();
    SERIALPORT.print("35b: ");
    SERIALPORT.println(seed);
    seed_xor16_3b1(seed);
    seed = xor16_3b1();
    SERIALPORT.print("3b1: ");
    SERIALPORT.println(seed);
    seed_xor16_3bb(seed);
    seed = xor16_3bb();
    SERIALPORT.print("3bb: ");
    SERIALPORT.println(seed);
    seed_xor16_3d9(seed);
    seed = xor16_3d9();
    SERIALPORT.print("3d9: ");
    SERIALPORT.println(seed);
    seed_xor16_437(seed);
    seed = xor16_437();
    SERIALPORT.print("437: ");
    SERIALPORT.println(seed);
    seed_xor16_471(seed);
    seed = xor16_471();
    SERIALPORT.print("471: ");
    SERIALPORT.println(seed);
    seed_xor16_4bb(seed);
    seed = xor16_4bb();
    SERIALPORT.print("4bb: ");
    SERIALPORT.println(seed);
    seed_xor16_57e(seed);
    seed = xor16_57e();
    SERIALPORT.print("57e: ");
    SERIALPORT.println(seed);
    seed_xor16_598(seed);
    seed = xor16_598();
    SERIALPORT.print("598: ");
    SERIALPORT.println(seed);
    seed_xor16_5b6(seed);
    seed = xor16_5b6();
    SERIALPORT.print("5b6: ");
    SERIALPORT.println(seed);
    seed_xor16_5bb(seed);
    seed = xor16_5bb();
    SERIALPORT.print("5bb: ");
    SERIALPORT.println(seed);
    seed_xor16_67d(seed);
    seed = xor16_67d();
    SERIALPORT.print("67d: ");
    SERIALPORT.println(seed);
    seed_xor16_6b5(seed);
    seed = xor16_6b5();
    SERIALPORT.print("6b5: ");
    SERIALPORT.println(seed);
    seed_xor16_6f1(seed);
    seed = xor16_6f1();
    SERIALPORT.print("6f1: ");
    SERIALPORT.println(seed);
    seed_xor16_71b(seed);
    seed = xor16_71b();
    SERIALPORT.print("71b: ");
    SERIALPORT.println(seed);
    seed_xor16_734(seed);
    seed = xor16_734();
    SERIALPORT.print("734: ");
    SERIALPORT.println(seed);
    seed_xor16_798(seed);
    seed = xor16_798();
    SERIALPORT.print("798: ");
    SERIALPORT.println(seed);
    seed_xor16_79d(seed);
    seed = xor16_79d();
    SERIALPORT.print("79d: ");
    SERIALPORT.println(seed);
    seed_xor16_7f1(seed);
    seed = xor16_7f1();
    SERIALPORT.print("7f1: ");
    SERIALPORT.println(seed);
    seed_xor16_895(seed);
    seed = xor16_895();
    SERIALPORT.print("895: ");
    SERIALPORT.println(seed);
    seed_xor16_897(seed);
    seed = xor16_897();
    SERIALPORT.print("897: ");
    SERIALPORT.println(seed);
    seed_xor16_97d(seed);
    seed = xor16_97d();
    SERIALPORT.print("97d: ");
    SERIALPORT.println(seed);
    seed_xor16_9d3(seed);
    seed = xor16_9d3();
    SERIALPORT.print("9d3: ");
    SERIALPORT.println(seed);
    seed_xor16_b17(seed);
    seed = xor16_b17();
    SERIALPORT.print("b17: ");
    SERIALPORT.println(seed);
    seed_xor16_b3d(seed);
    seed = xor16_b3d();
    SERIALPORT.print("b3d: ");
    SERIALPORT.println(seed);
    seed_xor16_b53(seed);
    seed = xor16_b53();
    SERIALPORT.print("b53: ");
    SERIALPORT.println(seed);
    seed_xor16_b71(seed);
    seed = xor16_b71();
    SERIALPORT.print("b71: ");
    SERIALPORT.println(seed);
    seed_xor16_bb3(seed);
    seed = xor16_bb3();
    SERIALPORT.print("bb3: ");
    SERIALPORT.println(seed);
    seed_xor16_bb4(seed);
    seed = xor16_bb4();
    SERIALPORT.print("bb4: ");
    SERIALPORT.println(seed);
    seed_xor16_bb5(seed);
    seed = xor16_bb5();
    SERIALPORT.print("bb5: ");
    SERIALPORT.println(seed);
    seed_xor16_c13(seed);
    seed = xor16_c13();
    SERIALPORT.print("c13: ");
    SERIALPORT.println(seed);
    seed_xor16_d3b(seed);
    seed = xor16_d3b();
    SERIALPORT.print("d3b: ");
    SERIALPORT.println(seed);
    seed_xor16_c3d(seed);
    seed = xor16_c3d();
    SERIALPORT.print("c3d: ");
    SERIALPORT.println(seed);
    seed_xor16_d3c(seed);
    seed = xor16_d3c();
    SERIALPORT.print("d3c: ");
    SERIALPORT.println(seed);
    seed_xor16_d52(seed);
    seed = xor16_d52();
    SERIALPORT.print("d52: ");
    SERIALPORT.println(seed);
    seed_xor16_d72(seed);
    seed = xor16_d72();
    SERIALPORT.print("d72: ");
    SERIALPORT.println(seed);
    seed_xor16_d76(seed);
    seed = xor16_d76();
    SERIALPORT.print("d76: ");
    SERIALPORT.println(seed);
    seed_xor16_d79(seed);
    seed = xor16_d79();
    SERIALPORT.print("d79: ");
    SERIALPORT.println(seed);
    seed_xor16_d97(seed);
    seed = xor16_d97();
    SERIALPORT.print("d97: ");
    SERIALPORT.println(seed);
    seed_xor16_e11(seed);
    seed = xor16_e11();
    SERIALPORT.print("e11: ");
    SERIALPORT.println(seed);
    seed_xor16_e75(seed);
    seed = xor16_e75();
    SERIALPORT.print("e75: ");
    SERIALPORT.println(seed);
    seed_xor16_f11(seed);
    seed = xor16_f11();
    SERIALPORT.print("f11: ");
    SERIALPORT.println(seed);
    seed_xor16_f13(seed);
    seed = xor16_f13();
    SERIALPORT.print("f13: ");
    SERIALPORT.println(seed);
    seed_xor16_f52(seed);
    seed = xor16_f52();
    SERIALPORT.print("f52: ");
    SERIALPORT.println(seed);
    seed_xor16_f72(seed);
    seed = xor16_f72();
    SERIALPORT.print("f72: ");
    SERIALPORT.println(seed);
    SERIALPORT.println("Done");
  #endif
#endif
}

void loop() {
  // put your main code here, to run repeatedly:

}
